#pragma once
#include <d3d11_4.h>
#include <dxgi1_4.h>
#include <dxgi1_5.h>

namespace directhook::d3d11
{
	using PFN_DXGISwapChain_QueryInterface = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, REFIID, void**);
	using PFN_DXGISwapChain_AddRef = ULONG(STDMETHODCALLTYPE*)(IDXGISwapChain*);
	using PFN_DXGISwapChain_Release = ULONG(STDMETHODCALLTYPE*)(IDXGISwapChain*);
	using PFN_DXGISwapChain_SetPrivateData = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, REFGUID, UINT, const void*);
	using PFN_DXGISwapChain_SetPrivateDataInterface = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, REFGUID, const IUnknown*);
	using PFN_DXGISwapChain_GetPrivateData = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, REFGUID, UINT*, void*);
	using PFN_DXGISwapChain_GetParent = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, REFIID, void**);
	using PFN_DXGISwapChain_GetDevice = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, REFIID, void**);
	using PFN_DXGISwapChain_Present = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, UINT, UINT);
	using PFN_DXGISwapChain_GetBuffer = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, UINT, REFIID, void**);
	using PFN_DXGISwapChain_SetFullscreenState = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, BOOL, IDXGIOutput*);
	using PFN_DXGISwapChain_GetFullscreenState = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, BOOL*, IDXGIOutput**);
	using PFN_DXGISwapChain_GetDesc = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, DXGI_SWAP_CHAIN_DESC*);
	using PFN_DXGISwapChain_ResizeBuffers = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, UINT, UINT, UINT, DXGI_FORMAT, UINT);
	using PFN_DXGISwapChain_ResizeTarget = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, const DXGI_MODE_DESC*);
	using PFN_DXGISwapChain_GetContainingOutput = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, IDXGIOutput**);
	using PFN_DXGISwapChain_GetFrameStatistics = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, DXGI_FRAME_STATISTICS*);
	using PFN_DXGISwapChain_GetLastPresentCount = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain*, UINT*);

	using PFN_DXGISwapChain1_GetBackgroundColor = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, DXGI_RGBA*);
	using PFN_DXGISwapChain1_GetCoreWindow = HWND(STDMETHODCALLTYPE*)(IDXGISwapChain1*);
	using PFN_DXGISwapChain1_GetDesc1 = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, DXGI_SWAP_CHAIN_DESC1*);
	using PFN_DXGISwapChain1_GetFullscreenDesc = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, DXGI_SWAP_CHAIN_FULLSCREEN_DESC*);
	using PFN_DXGISwapChain1_GetHwnd = HWND(STDMETHODCALLTYPE*)(IDXGISwapChain1*);
	using PFN_DXGISwapChain1_GetRestrictToOutput = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, IDXGIOutput**);
	using PFN_DXGISwapChain1_GetRotation = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, DXGI_MODE_ROTATION*);
	using PFN_DXGISwapChain1_IsTemporaryMonoSupported = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, BOOL*);
	using PFN_DXGISwapChain1_Present1 = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, UINT, const DXGI_PRESENT_PARAMETERS*);
	using PFN_DXGISwapChain1_SetBackgroundColor = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, const DXGI_RGBA*);
	using PFN_DXGISwapChain1_SetRotation = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain1*, DXGI_MODE_ROTATION);

	using PFN_DXGISwapChain2_GetFrameLatencyWaitableObject = HANDLE(STDMETHODCALLTYPE*)(IDXGISwapChain2*);
	using PFN_DXGISwapChain2_GetMatrixTransform = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain2*, DXGI_MATRIX_3X2_F*);
	using PFN_DXGISwapChain2_GetMaximumFrameLatency = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain2*, UINT*);
	using PFN_DXGISwapChain2_GetSourceSize = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain2*, UINT*, UINT*);
	using PFN_DXGISwapChain2_SetMatrixTransform = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain2*, const DXGI_MATRIX_3X2_F*);
	using PFN_DXGISwapChain2_SetMaximumFrameLatency = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain2*, UINT);
	using PFN_DXGISwapChain2_SetSourceSize = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain2*, UINT, UINT);

	using PFN_DXGISwapChain3_CheckColorSpaceSupport = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain3*, DXGI_COLOR_SPACE_TYPE, UINT*);
	using PFN_DXGISwapChain3_GetCurrentBackBufferIndex = UINT(STDMETHODCALLTYPE*)(IDXGISwapChain3*);
	using PFN_DXGISwapChain3_ResizeBuffers1 = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain3*, UINT, UINT, UINT, DXGI_FORMAT, UINT, const UINT*, IUnknown* const*);
	using PFN_DXGISwapChain3_SetColorSpace1 = HRESULT(STDMETHODCALLTYPE*)(IDXGISwapChain3*, DXGI_COLOR_SPACE_TYPE);

	using PFN_D3D11Device_QueryInterface = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, REFIID, void**);
	using PFN_D3D11Device_AddRef = ULONG(STDMETHODCALLTYPE*)(ID3D11Device*);
	using PFN_D3D11Device_Release = ULONG(STDMETHODCALLTYPE*)(ID3D11Device*);
	using PFN_D3D11Device_CreateBuffer = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_BUFFER_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Buffer**);
	using PFN_D3D11Device_CreateTexture1D = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_TEXTURE1D_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture1D**);
	using PFN_D3D11Device_CreateTexture2D = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_TEXTURE2D_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D**);
	using PFN_D3D11Device_CreateTexture3D = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_TEXTURE3D_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D**);
	using PFN_D3D11Device_CreateShaderResourceView = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, ID3D11Resource*, const D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView**);
	using PFN_D3D11Device_CreateUnorderedAccessView = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, ID3D11Resource*, const D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView**);
	using PFN_D3D11Device_CreateRenderTargetView = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, ID3D11Resource*, const D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView**);
	using PFN_D3D11Device_CreateDepthStencilView = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, ID3D11Resource*, const D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView**);
	using PFN_D3D11Device_CreateInputLayout = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_INPUT_ELEMENT_DESC*, UINT, const void*, SIZE_T, ID3D11InputLayout**);
	using PFN_D3D11Device_CreateVertexShader = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, ID3D11ClassLinkage*, ID3D11VertexShader**);
	using PFN_D3D11Device_CreateGeometryShader = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, ID3D11ClassLinkage*, ID3D11GeometryShader**);
	using PFN_D3D11Device_CreateGeometryShaderWithStreamOutput = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, const D3D11_SO_DECLARATION_ENTRY*, UINT, const UINT*, UINT, UINT, ID3D11ClassLinkage*, ID3D11GeometryShader**);
	using PFN_D3D11Device_CreatePixelShader = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, ID3D11ClassLinkage*, ID3D11PixelShader**);
	using PFN_D3D11Device_CreateHullShader = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, ID3D11ClassLinkage*, ID3D11HullShader**);
	using PFN_D3D11Device_CreateDomainShader = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, ID3D11ClassLinkage*, ID3D11DomainShader**);
	using PFN_D3D11Device_CreateComputeShader = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const void*, SIZE_T, ID3D11ClassLinkage*, ID3D11ComputeShader**);
	using PFN_D3D11Device_CreateClassLinkage = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, ID3D11ClassLinkage**);
	using PFN_D3D11Device_CreateBlendState = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_BLEND_DESC*, ID3D11BlendState**);
	using PFN_D3D11Device_CreateDepthStencilState = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState**);
	using PFN_D3D11Device_CreateRasterizerState = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_RASTERIZER_DESC*, ID3D11RasterizerState**);
	using PFN_D3D11Device_CreateSamplerState = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_SAMPLER_DESC*, ID3D11SamplerState**);
	using PFN_D3D11Device_CreateQuery = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_QUERY_DESC*, ID3D11Query**);
	using PFN_D3D11Device_CreatePredicate = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_QUERY_DESC*, ID3D11Predicate**);
	using PFN_D3D11Device_CreateCounter = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, const D3D11_COUNTER_DESC*, ID3D11Counter**);
	using PFN_D3D11Device_CreateDeferredContext = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, UINT, ID3D11DeviceContext**);
	using PFN_D3D11Device_OpenSharedResource = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, HANDLE, REFIID, void**);
	using PFN_D3D11Device_CheckFormatSupport = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, DXGI_FORMAT, UINT*);
	using PFN_D3D11Device_CheckMultisampleQualityLevels = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, DXGI_FORMAT, UINT, UINT*);
	using PFN_D3D11Device_CheckCounterInfo = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, D3D11_COUNTER_INFO*);
	using PFN_D3D11Device_CheckCounter = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, D3D11_COUNTER, UINT*, UINT*);
	using PFN_D3D11Device_CheckFeatureSupport = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, D3D11_FEATURE, void*, UINT);
	using PFN_D3D11Device_GetPrivateData = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, REFGUID, UINT*, void*);
	using PFN_D3D11Device_SetPrivateData = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, REFGUID, UINT, const void*);
	using PFN_D3D11Device_SetPrivateDataInterface = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*, REFGUID, const IUnknown*);
	using PFN_D3D11Device_GetFeatureLevel = D3D_FEATURE_LEVEL(STDMETHODCALLTYPE*)(ID3D11Device*);
	using PFN_D3D11Device_GetCreationFlags = UINT(STDMETHODCALLTYPE*)(ID3D11Device*);
	using PFN_D3D11Device_GetDeviceRemovedReason = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device*);
	using PFN_D3D11Device_GetImmediateContext = void(STDMETHODCALLTYPE*)(ID3D11Device*, ID3D11DeviceContext**);
	using PFN_D3D11Device_SetExceptionMode = void(STDMETHODCALLTYPE*)(ID3D11Device*, UINT);
	using PFN_D3D11Device_GetExceptionMode = UINT(STDMETHODCALLTYPE*)(ID3D11Device*);

	using PFN_D3D11Device1_CreateBlendState1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device1*, const D3D11_BLEND_DESC1*, ID3D11BlendState1**);
	using PFN_D3D11Device1_CreateDeferredContext1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device1*, UINT, ID3D11DeviceContext1**);
	using PFN_D3D11Device1_CreateDeviceContextState = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device1*, UINT, const D3D_FEATURE_LEVEL*, UINT, UINT, D3D_FEATURE_LEVEL*, UINT*, ID3DDeviceContextState**);
	using PFN_D3D11Device1_CreateRasterizerState1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device1*, const D3D11_RASTERIZER_DESC1*, ID3D11RasterizerState1**);
	using PFN_D3D11Device1_GetImmediateContext1 = void (STDMETHODCALLTYPE*)(ID3D11Device1*, ID3D11DeviceContext1**);
	using PFN_D3D11Device1_OpenSharedResource1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device1*, HANDLE, REFIID, void**);
	using PFN_D3D11Device1_OpenSharedResourceByName = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device1*, LPCWSTR, DWORD, REFIID, void**);

	using PFN_D3D11Device2_CheckMultisampleQualityLevels1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device2*, DXGI_FORMAT, UINT, UINT*);
	using PFN_D3D11Device2_CreateDeferredContext2 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device2*, UINT, ID3D11DeviceContext2**);
	using PFN_D3D11Device2_GetImmediateContext2 = void (STDMETHODCALLTYPE*)(ID3D11Device2*, ID3D11DeviceContext2**);
	using PFN_D3D11Device2_GetResourceTiling = void (STDMETHODCALLTYPE*)(ID3D11Device2*, ID3D11Resource*, UINT*, D3D11_PACKED_MIP_DESC*, D3D11_TILE_SHAPE*, UINT*, UINT*);

	using PFN_D3D11Device3_CreateDeferredContext3 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, UINT, ID3D11DeviceContext3**);
	using PFN_D3D11Device3_CreateQuery1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, const D3D11_QUERY_DESC1*, ID3D11Query1**);
	using PFN_D3D11Device3_CreateRasterizerState2 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, const D3D11_RASTERIZER_DESC2*, ID3D11RasterizerState2**);
	using PFN_D3D11Device3_CreateRenderTargetView1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, ID3D11Resource*, const D3D11_RENDER_TARGET_VIEW_DESC1*, ID3D11RenderTargetView1**);
	using PFN_D3D11Device3_CreateShaderResourceView1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, ID3D11Resource*, const D3D11_SHADER_RESOURCE_VIEW_DESC1*, ID3D11ShaderResourceView1**);
	using PFN_D3D11Device3_CreateTexture2D1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, const D3D11_TEXTURE2D_DESC1*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture2D1**);
	using PFN_D3D11Device3_CreateTexture3D1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, const D3D11_TEXTURE3D_DESC1*, const D3D11_SUBRESOURCE_DATA*, ID3D11Texture3D1**);
	using PFN_D3D11Device3_CreateUnorderedAccessView1 = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, ID3D11Resource*, const D3D11_UNORDERED_ACCESS_VIEW_DESC1*, ID3D11UnorderedAccessView1**);
	using PFN_D3D11Device3_GetImmediateContext3 = void (STDMETHODCALLTYPE*)(ID3D11Device3*, ID3D11DeviceContext3**);
	using PFN_D3D11Device3_ReadFromSubresource = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, void*, UINT, UINT, ID3D11Resource*, UINT, const D3D11_BOX*);
	using PFN_D3D11Device3_WriteToSubresource = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device3*, ID3D11Resource*, UINT, const D3D11_BOX*, const void*, UINT, UINT);

	using PFN_D3D11Device4_RegisterDeviceRemovedEvent = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device4*, HANDLE, DWORD*);
	using PFN_D3D11Device4_UnregisterDeviceRemoved = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device4*, DWORD);

	using PFN_D3D11Device5_CreateFence = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device5*, UINT64, D3D11_FENCE_FLAG, REFIID, void**);
	using PFN_D3D11Device5_OpenSharedFence = HRESULT(STDMETHODCALLTYPE*)(ID3D11Device5*, HANDLE, REFIID, void**);

	using PFN_D3D11DeviceContext_QueryInterface = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, REFIID, void**);
	using PFN_D3D11DeviceContext_AddRef = ULONG(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_Release = ULONG(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_GetDevice = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Device**);
	using PFN_D3D11DeviceContext_GetPrivateData = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, REFGUID, UINT*, void*);
	using PFN_D3D11DeviceContext_SetPrivateData = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, REFGUID, UINT, const void*);
	using PFN_D3D11DeviceContext_SetPrivateDataInterface = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, REFGUID, const IUnknown*);
	using PFN_D3D11DeviceContext_VSSetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*);
	using PFN_D3D11DeviceContext_PSSetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView* const*);
	using PFN_D3D11DeviceContext_PSSetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11PixelShader*, ID3D11ClassInstance* const*, UINT);
	using PFN_D3D11DeviceContext_PSSetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState* const*);
	using PFN_D3D11DeviceContext_VSSetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11VertexShader*, ID3D11ClassInstance* const*, UINT);
	using PFN_D3D11DeviceContext_DrawIndexed = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, INT);
	using PFN_D3D11DeviceContext_Draw = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT);
	using PFN_D3D11DeviceContext_Map = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, UINT, D3D11_MAP, UINT, D3D11_MAPPED_SUBRESOURCE*);
	using PFN_D3D11DeviceContext_Unmap = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, UINT);
	using PFN_D3D11DeviceContext_PSSetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*);
	using PFN_D3D11DeviceContext_IASetInputLayout = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11InputLayout*);
	using PFN_D3D11DeviceContext_IASetVertexBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext_IASetIndexBuffer = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Buffer*, DXGI_FORMAT, UINT);
	using PFN_D3D11DeviceContext_DrawIndexedInstanced = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, UINT, INT, UINT);
	using PFN_D3D11DeviceContext_DrawInstanced = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, UINT, UINT);
	using PFN_D3D11DeviceContext_GSSetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*);
	using PFN_D3D11DeviceContext_GSSetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11GeometryShader*, ID3D11ClassInstance* const*, UINT);
	using PFN_D3D11DeviceContext_IASetPrimitiveTopology = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, D3D11_PRIMITIVE_TOPOLOGY);
	using PFN_D3D11DeviceContext_VSSetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView* const*);
	using PFN_D3D11DeviceContext_VSSetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState* const*);
	using PFN_D3D11DeviceContext_Begin = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Asynchronous*);
	using PFN_D3D11DeviceContext_End = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Asynchronous*);
	using PFN_D3D11DeviceContext_GetData = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Asynchronous*, void*, UINT, UINT);
	using PFN_D3D11DeviceContext_SetPredication = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Predicate*, BOOL);
	using PFN_D3D11DeviceContext_GSSetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView* const*);
	using PFN_D3D11DeviceContext_GSSetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState* const*);
	using PFN_D3D11DeviceContext_OMSetRenderTargets = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, ID3D11RenderTargetView* const*, ID3D11DepthStencilView*);
	using PFN_D3D11DeviceContext_OMSetRenderTargetsAndUnorderedAccessViews = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, ID3D11RenderTargetView* const*, ID3D11DepthStencilView*, UINT, UINT, ID3D11UnorderedAccessView* const*, const UINT*);
	using PFN_D3D11DeviceContext_OMSetBlendState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11BlendState*, const FLOAT[4], UINT);
	using PFN_D3D11DeviceContext_OMSetDepthStencilState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11DepthStencilState*, UINT);
	using PFN_D3D11DeviceContext_SOSetTargets = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, ID3D11Buffer* const*, const UINT*);
	using PFN_D3D11DeviceContext_DrawAuto = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_DrawIndexedInstancedIndirect = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Buffer*, UINT);
	using PFN_D3D11DeviceContext_DrawInstancedIndirect = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Buffer*, UINT);
	using PFN_D3D11DeviceContext_Dispatch = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, UINT);
	using PFN_D3D11DeviceContext_DispatchIndirect = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Buffer*, UINT);
	using PFN_D3D11DeviceContext_RSSetState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11RasterizerState*);
	using PFN_D3D11DeviceContext_RSSetViewports = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, const D3D11_VIEWPORT*);
	using PFN_D3D11DeviceContext_RSSetScissorRects = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, const D3D11_RECT*);
	using PFN_D3D11DeviceContext_CopySubresourceRegion = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, UINT, UINT, UINT, UINT, ID3D11Resource*, UINT, const D3D11_BOX*);
	using PFN_D3D11DeviceContext_CopyResource = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, ID3D11Resource*);
	using PFN_D3D11DeviceContext_UpdateSubresource = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, UINT, const D3D11_BOX*, const void*, UINT, UINT);
	using PFN_D3D11DeviceContext_CopyStructureCount = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Buffer*, UINT, ID3D11UnorderedAccessView*);
	using PFN_D3D11DeviceContext_ClearRenderTargetView = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11RenderTargetView*, const FLOAT[4]);
	using PFN_D3D11DeviceContext_ClearUnorderedAccessViewUint = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11UnorderedAccessView*, const UINT[4]);
	using PFN_D3D11DeviceContext_ClearUnorderedAccessViewFloat = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11UnorderedAccessView*, const FLOAT[4]);
	using PFN_D3D11DeviceContext_ClearDepthStencilView = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11DepthStencilView*, UINT, FLOAT, UINT8);
	using PFN_D3D11DeviceContext_GenerateMips = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11ShaderResourceView*);
	using PFN_D3D11DeviceContext_SetResourceMinLOD = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, FLOAT);
	using PFN_D3D11DeviceContext_GetResourceMinLOD = FLOAT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*);
	using PFN_D3D11DeviceContext_ResolveSubresource = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Resource*, UINT, ID3D11Resource*, UINT, DXGI_FORMAT);
	using PFN_D3D11DeviceContext_ExecuteCommandList = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11CommandList*, BOOL);
	using PFN_D3D11DeviceContext_HSSetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView* const*);
	using PFN_D3D11DeviceContext_HSSetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11HullShader*, ID3D11ClassInstance* const*, UINT);
	using PFN_D3D11DeviceContext_HSSetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState* const*);
	using PFN_D3D11DeviceContext_HSSetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*);
	using PFN_D3D11DeviceContext_DSSetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView* const*);
	using PFN_D3D11DeviceContext_DSSetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11DomainShader*, ID3D11ClassInstance* const*, UINT);
	using PFN_D3D11DeviceContext_DSSetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState* const*);
	using PFN_D3D11DeviceContext_DSSetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*);
	using PFN_D3D11DeviceContext_CSSetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView* const*);
	using PFN_D3D11DeviceContext_CSSetUnorderedAccessViews = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11UnorderedAccessView* const*, const UINT*);
	using PFN_D3D11DeviceContext_CSSetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11ComputeShader*, ID3D11ClassInstance* const*, UINT);
	using PFN_D3D11DeviceContext_CSSetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState* const*);
	using PFN_D3D11DeviceContext_CSSetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer* const*);
	using PFN_D3D11DeviceContext_VSGetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_PSGetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView**);
	using PFN_D3D11DeviceContext_PSGetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, UINT*);
	using PFN_D3D11DeviceContext_PSGetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState**);
	using PFN_D3D11DeviceContext_VSGetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, UINT*);
	using PFN_D3D11DeviceContext_PSGetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_IAGetInputLayout = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11InputLayout**);
	using PFN_D3D11DeviceContext_IAGetVertexBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext_IAGetIndexBuffer = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Buffer**, DXGI_FORMAT*, UINT*);
	using PFN_D3D11DeviceContext_GSGetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_GSGetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, UINT*);
	using PFN_D3D11DeviceContext_IAGetPrimitiveTopology = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, D3D11_PRIMITIVE_TOPOLOGY*);
	using PFN_D3D11DeviceContext_VSGetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView**);
	using PFN_D3D11DeviceContext_VSGetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState**);
	using PFN_D3D11DeviceContext_GetPredication = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11Predicate**, BOOL*);
	using PFN_D3D11DeviceContext_GSGetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView**);
	using PFN_D3D11DeviceContext_GSGetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState**);
	using PFN_D3D11DeviceContext_OMGetRenderTargets = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, ID3D11RenderTargetView**, ID3D11DepthStencilView**);
	using PFN_D3D11DeviceContext_OMGetRenderTargetsAndUnorderedAccessViews = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, ID3D11RenderTargetView**, ID3D11DepthStencilView**, UINT, UINT, ID3D11UnorderedAccessView**);
	using PFN_D3D11DeviceContext_OMGetBlendState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11BlendState**, FLOAT[4], UINT*);
	using PFN_D3D11DeviceContext_OMGetDepthStencilState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11DepthStencilState**, UINT*);
	using PFN_D3D11DeviceContext_SOGetTargets = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_RSGetState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11RasterizerState**);
	using PFN_D3D11DeviceContext_RSGetViewports = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT*, D3D11_VIEWPORT*);
	using PFN_D3D11DeviceContext_RSGetScissorRects = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT*, D3D11_RECT*);
	using PFN_D3D11DeviceContext_HSGetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView**);
	using PFN_D3D11DeviceContext_HSGetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, UINT*);
	using PFN_D3D11DeviceContext_HSGetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState**);
	using PFN_D3D11DeviceContext_HSGetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_DSGetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView**);
	using PFN_D3D11DeviceContext_DSGetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, UINT*);
	using PFN_D3D11DeviceContext_DSGetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState**);
	using PFN_D3D11DeviceContext_DSGetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_CSGetShaderResources = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11ShaderResourceView**);
	using PFN_D3D11DeviceContext_CSGetUnorderedAccessViews = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11UnorderedAccessView**);
	using PFN_D3D11DeviceContext_CSGetShader = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, UINT*);
	using PFN_D3D11DeviceContext_CSGetSamplers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11SamplerState**);
	using PFN_D3D11DeviceContext_CSGetConstantBuffers = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, UINT, UINT, ID3D11Buffer**);
	using PFN_D3D11DeviceContext_ClearState = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_Flush = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_GetType = D3D11_DEVICE_CONTEXT_TYPE(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_GetContextFlags = UINT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*);
	using PFN_D3D11DeviceContext_FinishCommandList = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext*, BOOL, ID3D11CommandList**);

	using PFN_D3D11DeviceContext1_CopySubresourceRegion1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3D11Resource*, UINT, UINT, UINT, UINT, ID3D11Resource*, UINT, const D3D11_BOX*, UINT);
	using PFN_D3D11DeviceContext1_UpdateSubresource1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3D11Resource*, UINT, const D3D11_BOX*, const void*, UINT, UINT, UINT);
	using PFN_D3D11DeviceContext1_DiscardResource = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3D11Resource*);
	using PFN_D3D11DeviceContext1_DiscardView = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3D11View*);
	using PFN_D3D11DeviceContext1_VSSetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext1_HSSetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext1_DSSetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext1_GSSetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext1_PSSetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext1_CSSetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer* const*, const UINT*, const UINT*);
	using PFN_D3D11DeviceContext1_VSGetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext1_HSGetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext1_DSGetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext1_GSGetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext1_PSGetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext1_CSGetConstantBuffers1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, UINT, UINT, ID3D11Buffer**, UINT*, UINT*);
	using PFN_D3D11DeviceContext1_SwapDeviceContextState = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3DDeviceContextState*, ID3DDeviceContextState**);
	using PFN_D3D11DeviceContext1_ClearView = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3D11View*, const FLOAT[4], const D3D11_RECT*, UINT);
	using PFN_D3D11DeviceContext1_DiscardView1 = void (STDMETHODCALLTYPE*)(ID3D11DeviceContext1*, ID3D11View*, const D3D11_RECT*, UINT);

	using PFN_D3D11DeviceContext2_UpdateTileMappings = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, ID3D11Resource*, UINT, const D3D11_TILED_RESOURCE_COORDINATE*, const D3D11_TILE_REGION_SIZE*, ID3D11Buffer*, UINT, const UINT*, const UINT*, const UINT*, UINT);
	using PFN_D3D11DeviceContext2_CopyTileMappings = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, ID3D11Resource*, const D3D11_TILED_RESOURCE_COORDINATE*, ID3D11Resource*, const D3D11_TILED_RESOURCE_COORDINATE*, const D3D11_TILE_REGION_SIZE*, UINT);
	using PFN_D3D11DeviceContext2_CopyTiles = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, ID3D11Resource*, const D3D11_TILED_RESOURCE_COORDINATE*, const D3D11_TILE_REGION_SIZE*, ID3D11Buffer*, UINT64, UINT);
	using PFN_D3D11DeviceContext2_UpdateTiles = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, ID3D11Resource*, UINT, const D3D11_TILED_RESOURCE_COORDINATE*, const D3D11_TILE_REGION_SIZE*, ID3D11Buffer*, UINT, const UINT*, const UINT*, const UINT*, UINT);
	using PFN_D3D11DeviceContext2_ResizeTilePool = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, ID3D11Buffer*, UINT);
	using PFN_D3D11DeviceContext2_TiledResourceBarrier = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, ID3D11Resource*, ID3D11Resource*);
	using PFN_D3D11DeviceContext2_IsAnnotationEnabled = BOOL(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*);
	using PFN_D3D11DeviceContext2_SetMarkerInt = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, LPCWSTR, INT);
	using PFN_D3D11DeviceContext2_BeginEventInt = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*, LPCWSTR, INT);
	using PFN_D3D11DeviceContext2_EndEvent = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext2*);

	using PFN_D3D11DeviceContext3_Flush1 = void(STDMETHODCALLTYPE*)(ID3D11DeviceContext3*, D3D11_CONTEXT_TYPE, HANDLE);
	using PFN_D3D11DeviceContext3_GetHardwareProtectionState = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext3*, BOOL*);
	using PFN_D3D11DeviceContext3_SetHardwareProtectionState = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext3*, BOOL);

	using PFN_D3D11DeviceContext4_Signal = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext4*, ID3D11Fence*, UINT64);
	using PFN_D3D11DeviceContext4_Wait = HRESULT(STDMETHODCALLTYPE*)(ID3D11DeviceContext4*, ID3D11Fence*, UINT64);
}